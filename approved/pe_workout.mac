; ***************************************************************************
; GENERATED:
;   Time:    14-Jun-2019 16:54PM
;   By:      Daniel Hadad
;   Command: origen g pe_workout -t pe.rb
; ***************************************************************************
; ENVIRONMENT:
;   Application
;     Source:    git@github.com:Origen-SDK/origen_debuggers.git
;     Version:   0.6.0
;     Branch:    comments(b8d9678c2d3) (+local edits)
;   Origen
;     Source:    https://github.com/Origen-SDK/origen
;     Version:   0.28.0
;   Plugins
;     origen_doc_helpers:       0.5.2
;     origen_jtag:              0.17.1
;     origen_updater:           0.7.0
; ***************************************************************************
; ######################################################################
; ## Verify the time base, wait for 10ms which should be 10 sleep cycles
; ######################################################################
; Wait for 10.0ms
delay 10
; ######################################################################
; ## Verify a register API write
; ######################################################################
; Needs to be enabled when a register protocol is available
; ######################################################################
; ## Verify a register API read
; ######################################################################
; Needs to be enabled when a register protocol is available
; ######################################################################
; ## Verify write_dr with a register
; ######################################################################
jtag_start
jtag_dr 32t 12345678
; ######################################################################
; ## Verify write_dr with a data value
; ######################################################################
jtag_dr 16t 1122
; ######################################################################
; ## Verify read_dr with a register
; ######################################################################
; ######################################################################
; ## Verify read_dr with a data value
; ######################################################################
; ######################################################################
; ## Verify write_ir with a register
; ######################################################################
jtag_ir 4t 12345678
; ######################################################################
; ## Verify write_ir with a data value
; ######################################################################
jtag_ir 16t 1122
; ######################################################################
; ## Verify read_ir with a register
; ######################################################################
; ######################################################################
; ## Verify read_ir with a data value
; ######################################################################
; ######################################################################
; ## Verify write_register method
; ######################################################################
jtag_end
; [P&E] Write REG32 register, address: 0x000020 with value: 0x12345678
MM.L 20 12345678
; ######################################################################
; ## Verify read_register method
; ######################################################################
; [P&E] Read REG32 register, address: 0x000020, expect value: 0x12345678
DUMP.L 32 32
; ######################################################################
; ## Verify write8
; ######################################################################
MM.B 12 55
; ######################################################################
; ## Verify write16
; ######################################################################
MM.W 12 55AA
; ######################################################################
; ## Verify write32
; ######################################################################
MM.L 12 55AA3344
; ######################################################################
; ## Verify read8
; ######################################################################
DUMP.B 18 18
; ######################################################################
; ## Verify read16
; ######################################################################
DUMP.W 18 18
; ######################################################################
; ## Verify read32
; ######################################################################
DUMP.L 18 18
; ######################################################################
; ## Verify read32, optimized
; ######################################################################
DUMP.L 18 18
; ######################################################################
; ## Verify Array of 32-bit data
; ######################################################################
DUMP.L 18 18
; ######################################################################
; ## Verify Array of 32-bit data, optimized
; ######################################################################
DUMP.L 18 18
; ######################################################################
; ## Verify write with a register
; ######################################################################
; [P&E] Write REG32 register, address: 0x000020 with value: 0x12345678
MM.L 20 12345678
; ######################################################################
; ## Verify write with a data value
; ######################################################################
MM.B 12 55
; ######################################################################
; ## Verify read with a register
; ######################################################################
; [P&E] Read REG32 register, address: 0x000020, expect value: 0x12345678
DUMP.L 32 32
; ######################################################################
; ## Verify read with a register, optimized
; ######################################################################
; [P&E] Read REG32 register, address: 0x000020, expect value: 0x12345678
DUMP.L 32 32
; ######################################################################
; ## Verify read with register and following 3 words, optimized
; ######################################################################
; [P&E] Read REG32 register, address: 0x000020, expect value: 0x12345678
DUMP.L 32 32
; ######################################################################
; ## Verify read with an 8-bit data value
; ######################################################################
DUMP.B 18 18
; ######################################################################
; ## Verify read with a 16-bit data value
; ######################################################################
DUMP.W 18 18
; ######################################################################
; ## Verify read with a 32-bit data value
; ######################################################################
DUMP.L 18 18
; ######################################################################
; ## Verify delay of 10k mS
; ######################################################################
delay 10000
; ######################################################################
; ## Pattern complete
; ######################################################################

